{
  "array type": {
    "prefix": "a",
    "body": [
      "${1:T}()${0}"
    ],
    "description": "array type declaration"
  },
  "Dictionary(Of TKey, TValue) variable": {
    "prefix": "vd",
    "body": [
      "Dim ${1:dic} = new Dictionary(Of ${2:Object}, ${3:Object})()${0}"
    ],
    "description": "Dictionary(Of TKey, TValue) variable declaration"
  },
  "Dictionary(Of TKey, TValue) variable (with initializer)": {
    "prefix": "vd_",
    "body": [
      "Dim ${1:dic} = new Dictionary(Of ${2:Object}, ${3:Object})() From {{0, ${4:Nothing}}}${0}"
    ],
    "description": "Dictionary(Of TKey, TValue) variable declaration (with initializer)"
  },
  "HashSet(Of T) type": {
    "prefix": "ghs",
    "body": [
      "HashSet(Of ${1:T})${0}"
    ],
    "description": "HashSet(Of T) type declaration"
  },
  "HashSet(Of T) variable": {
    "prefix": "vhs",
    "body": [
      "Dim ${1:items} = new HashSet(Of ${2:T})()${0}"
    ],
    "description": "HashSet(Of T) variable declaration"
  },
  "HashSet(Of T) variable (with initializer)": {
    "prefix": "vhs_",
    "body": [
      "Dim ${1:items} = new HashSet(Of ${2:T})() From {${3:Nothing}}${0}"
    ],
    "description": "HashSet(Of T) variable declaration (with initializer)"
  },
  "if Enum.TryParse": {
    "prefix": "ifemtp",
    "body": [
      "Dim ${1:x} As ${2:TEnum}",
      "If Enum.TryParse(${3:value}, ${1})",
      "\t${0}",
      "End If"
    ],
    "description": "if statement with condition whether Enum.TryParse method returns true."
  },
  "if not Enum.TryParse": {
    "prefix": "ifxemtp",
    "body": [
      "Dim ${1:x} As ${2:TEnum}",
      "If Not Enum.TryParse(${3:value}, ${1})",
      "\t${0}",
      "End If"
    ],
    "description": "if statement with condition whether Enum.TryParse method returns false."
  },
  "List(Of T) type": {
    "prefix": "gl",
    "body": [
      "List(Of ${1:T})${0}"
    ],
    "description": "List(Of T) type declaration"
  },
  "List(Of T) variable": {
    "prefix": "vl",
    "body": [
      "Dim ${1:items} = new List(Of ${2:T})()${0}"
    ],
    "description": "List(Of T) variable declaration"
  },
  "List(Of T) variable (with initializer)": {
    "prefix": "vl_",
    "body": [
      "Dim ${1:items} = new List(Of ${2:T})() From {${3:Nothing}}${0}"
    ],
    "description": "List(Of T) variable declaration (with initializer)"
  },
  "namespace": {
    "prefix": "ns",
    "body": [
      "Namespace ${1:NamespaceName}",
      "\t${TM_SELECTED_TEXT}${0}",
      "End Namespace"
    ],
    "description": "namespace declaration"
  },
  "new array ": {
    "prefix": "na",
    "body": [
      "New ${1:T}(${2:0}){}${0}"
    ],
    "description": "new array "
  },
  "Object keyword": {
    "prefix": "o",
    "body": [
      "Object${0}"
    ],
    "description": "Object keyword"
  },
  "ObservableCollection(Of T) type": {
    "prefix": "goc",
    "body": [
      "ObservableCollection(Of ${1:T})${0}"
    ],
    "description": "ObservableCollection(Of T) type declaration"
  },
  "ObservableCollection(Of T) variable": {
    "prefix": "voc",
    "body": [
      "Dim ${1:items} = new ObservableCollection(Of ${2:T})()${0}"
    ],
    "description": "ObservableCollection(Of T) variable declaration"
  },
  "ObservableCollection(Of T) variable (with initializer)": {
    "prefix": "voc_",
    "body": [
      "Dim ${1:items} = new ObservableCollection(Of ${2:T})() From {${3:Nothing}}${0}"
    ],
    "description": "ObservableCollection(Of T) variable declaration (with initializer)"
  },
  "Regex type": {
    "prefix": "rx",
    "body": [
      "Regex${0}"
    ],
    "description": "Regex type declaration"
  },
  "Return keyword": {
    "prefix": "r",
    "body": [
      "Return${0}"
    ],
    "description": "Return keyword"
  },
  "String keyword": {
    "prefix": "s",
    "body": [
      "String${0}"
    ],
    "description": "String keyword"
  },
  "StringBuilder variable": {
    "prefix": "vsb",
    "body": [
      "Dim ${1:sb} = New StringBuilder()${0}"
    ],
    "description": "StringBuilder variable declaration"
  },
  "Throw statement": {
    "prefix": "tw",
    "body": [
      "Throw${0}"
    ],
    "description": "Throw statement"
  },
  "TimeSpan type": {
    "prefix": "ts",
    "body": [
      "TimeSpan${0}"
    ],
    "description": "TimeSpan type declaration"
  },
  "Yield keyword": {
    "prefix": "y",
    "body": [
      "Yield${0}"
    ],
    "description": "Yield keyword"
  }
}