{
  " const": {
    "prefix": "k",
    "body": [
      "const ${1:T} ${2:x} = ${3:nullptr};${0}"
    ],
    "description": " const declaration"
  },
  " function": {
    "prefix": "f",
    "body": [
      "${1:void} ${2:FunctionName}()",
      "{",
      "\t${0}",
      "}"
    ],
    "description": " function declaration"
  },
  " function (with parameters)": {
    "prefix": "f_",
    "body": [
      "${1:void} ${2:FunctionName}(${3:T parameter})",
      "{",
      "\t${0}",
      "}"
    ],
    "description": " function declaration (with parameters)"
  },
  "#define": {
    "prefix": "ppd",
    "body": [
      "#define ${1:x}${0}"
    ],
    "description": "#define preprocessor directive"
  },
  "#error": {
    "prefix": "ppe",
    "body": [
      "#error ${1:message}${TM_SELECTED_TEXT}${0}"
    ],
    "description": "#error preprocessor directive"
  },
  "#if": {
    "prefix": "ppif",
    "body": [
      "#if ${1:x}",
      "\t${TM_SELECTED_TEXT}${0}",
      "#endif"
    ],
    "description": "#if preprocessor directive"
  },
  "#if #else": {
    "prefix": "ppife",
    "body": [
      "#if ${1:x}",
      "\t${TM_SELECTED_TEXT}${0}",
      "#elif ${2:x}",
      "#else",
      "#endif"
    ],
    "description": "#if #else preprocessor directive"
  },
  "#ifdef": {
    "prefix": "ppifd",
    "body": [
      "#ifdef ${1:x}",
      "\t${TM_SELECTED_TEXT}${0}",
      "#endif"
    ],
    "description": "#ifdef preprocessor directive"
  },
  "#ifndef": {
    "prefix": "ppifnd",
    "body": [
      "#ifndef ${1:x}",
      "\t${TM_SELECTED_TEXT}${0}",
      "#endif"
    ],
    "description": "#ifndef preprocessor directive"
  },
  "#include": {
    "prefix": "ppi",
    "body": [
      "#include <${1:path}${TM_SELECTED_TEXT}>${0}"
    ],
    "description": "#include preprocessor directive"
  },
  "#line": {
    "prefix": "ppl",
    "body": [
      "#line ${1:0} ${2:file}${0}"
    ],
    "description": "#line preprocessor directive"
  },
  "#pragma region": {
    "prefix": "ppr",
    "body": [
      "#pragma region ${1:RegionName}",
      "\t${TM_SELECTED_TEXT}${0}",
      "#pragma endregion ${1}"
    ],
    "description": "#pragma region preprocessor directive"
  },
  "#undef": {
    "prefix": "ppud",
    "body": [
      "#undef ${1:x}${0}"
    ],
    "description": "#undef preprocessor directive"
  },
  "#using": {
    "prefix": "ppu",
    "body": [
      "#using ${1:file}${0}"
    ],
    "description": "#using preprocessor directive"
  },
  "array variable": {
    "prefix": "va",
    "body": [
      "${1:T} ${2:items}[${3:0}];${0}"
    ],
    "description": "array variable declaration"
  },
  "Boolean variable": {
    "prefix": "vb",
    "body": [
      "bool ${1:f} = ${2:false};${0}"
    ],
    "description": "Boolean variable declaration"
  },
  "class": {
    "prefix": "c",
    "body": [
      "class ${1:ClassName}",
      "{",
      "public:",
      "\t${1}();",
      "\t~${1}();",
      "",
      "private:",
      "\t${TM_SELECTED_TEXT}${0}",
      "};",
      "",
      "${1}::${1}()",
      "{",
      "}",
      "",
      "${1}::~${1}()",
      "{",
      "}"
    ],
    "description": "class declaration"
  },
  "constructor": {
    "prefix": "cr",
    "body": [
      "${1:TypeName}()",
      "{",
      "\t${0}",
      "}"
    ],
    "description": "constructor declaration"
  },
  "destructor": {
    "prefix": "dr",
    "body": [
      "~${1:TypeName}()",
      "{",
      "\t${0}",
      "}"
    ],
    "description": "destructor declaration"
  },
  "do-while": {
    "prefix": "dw",
    "body": [
      "do",
      "{",
      "\t${TM_SELECTED_TEXT}${0}",
      "} while (${1:true});"
    ],
    "description": "do-while statement"
  },
  "else": {
    "prefix": "e",
    "body": [
      "else",
      "{",
      "\t${TM_SELECTED_TEXT}${0}",
      "}"
    ],
    "description": "else statement"
  },
  "else-if": {
    "prefix": "eif",
    "body": [
      "else if (${1:true})",
      "{",
      "\t${TM_SELECTED_TEXT}${0}",
      "}"
    ],
    "description": "else-if"
  },
  "enum": {
    "prefix": "em",
    "body": [
      "enum ${1:EnumName}",
      "{",
      "\t${TM_SELECTED_TEXT}${0}",
      "};"
    ],
    "description": "enum declaration"
  },
  "enum class": {
    "prefix": "emc",
    "body": [
      "enum class ${1:EnumClassName}",
      "{",
      "\t${TM_SELECTED_TEXT}${0}",
      "};"
    ],
    "description": "enum class declaration"
  },
  "for": {
    "prefix": "fr",
    "body": [
      "for (${1:size_t} ${2:i} = 0; ${2} < ${3:length}; ${2}++)",
      "{",
      "\t${TM_SELECTED_TEXT}${0}",
      "}"
    ],
    "description": "for statement"
  },
  "for (range-based)": {
    "prefix": "frrb",
    "body": [
      "for (auto& ${1:i} : ${2:x})",
      "{",
      "\t${TM_SELECTED_TEXT}${0}",
      "}"
    ],
    "description": "range-based for statement"
  },
  "for (reversed)": {
    "prefix": "frr",
    "body": [
      "for (int ${1:i} = ${2:length} - 1; ${1} >= 0; ${1}--)",
      "{",
      "\t${TM_SELECTED_TEXT}${0}",
      "}"
    ],
    "description": "for statement (reversed)"
  },
  "if": {
    "prefix": "if",
    "body": [
      "if (${1:true})",
      "{",
      "\t${TM_SELECTED_TEXT}${0}",
      "}"
    ],
    "description": "if statement"
  },
  "Int32 variable": {
    "prefix": "vi",
    "body": [
      "int ${1:i} = ${2:0};${0}"
    ],
    "description": "Int32 variable declaration"
  },
  "interface": {
    "prefix": "ie",
    "body": [
      "__interface ${1:InterfaceName}",
      "{",
      "\t${TM_SELECTED_TEXT}${0}",
      "};"
    ],
    "description": "interface declaration"
  },
  "namespace": {
    "prefix": "ns",
    "body": [
      "namespace ${1:NamespaceName}",
      "{",
      "\t${TM_SELECTED_TEXT}${0}",
      "}"
    ],
    "description": "namespace declaration"
  },
  "String variable": {
    "prefix": "vs",
    "body": [
      "string ${1:s} = ${2:nullptr};${0}"
    ],
    "description": "String variable declaration"
  },
  "struct": {
    "prefix": "st",
    "body": [
      "struct ${1:StructName}",
      "{",
      "\t${TM_SELECTED_TEXT}${0}",
      "};"
    ],
    "description": "struct declaration"
  },
  "switch": {
    "prefix": "sh",
    "body": [
      "switch (${1:SwitchOn})",
      "{",
      "\t${2:default:",
      "    break;}${0}",
      "}"
    ],
    "description": "switch statement"
  },
  "template": {
    "prefix": "t",
    "body": [
      "template <${1:typename} ${2:T}${TM_SELECTED_TEXT}>${0}"
    ],
    "description": "template"
  },
  "try-catch": {
    "prefix": "tc",
    "body": [
      "try",
      "{",
      "\t${0}",
      "}",
      "catch (const std::exception&)",
      "{",
      "}"
    ],
    "description": "try-catch statement"
  },
  "union": {
    "prefix": "un",
    "body": [
      "union ${1:UnionName}",
      "{",
      "\t${TM_SELECTED_TEXT}${0}",
      "};"
    ],
    "description": "union"
  },
  "variable declaration": {
    "prefix": "v",
    "body": [
      "${1:T} ${2:x} = ${3:nullptr};${0}"
    ],
    "description": " variable declaration"
  },
  "while": {
    "prefix": "we",
    "body": [
      "while (${1:true})",
      "{",
      "\t${TM_SELECTED_TEXT}${0}",
      "}"
    ],
    "description": "while statement"
  }
}